#pragma once

#include <boost/algorithm/string.hpp>
#include <boost/beast.hpp>
#include <cstdint>
#include <optional>
#include <unordered_map>

#include "api_server/logger.h"
#include "api_server/server/responses.h"
#include "api_server/server/types.h"

namespace server
{

/// @brief Interface for adding routes to Router
class RouteHolder
{
public:
    virtual ~RouteHolder() = default;
    virtual void add_route(bb::http::verb verb, const std::string& resource, const Endpoint endpoint) = 0;
};

/// @brief Responsible for routing HTTP requests to endpoint controllers, translating from URI strings
/// to mapped function objects
class Router : public RouteHolder
{
public:
    explicit Router(const Logger& logger);

    /// @brief Adds a route to an endpoint for the given HTTP method and resource name
    void add_route(const bb::http::verb verb, const std::string& resource, const Endpoint endpoint) override;

    /// @brief Attempt to route the request to an endpoint for handling
    /// @return Response generated by endpoint, or bad request if endpoint not found
    HttpResponse process_http_request(const BoostHttpRequest& boost_request);

    /// @brief Perform initial validation checking of a received request
    bool validate_request(const BoostHttpRequest& boost_request, const std::string& request_id) const;

private:
    /// @brief Generates a route key from a HTTP method and resource name, in the form {verb}:{resource}.
    /// Resource names are case insensitive.
    std::string route_key(const bb::http::verb verb, const std::string& resource) const;

    /// @brief  Returns Endpoint for verb and resource name if found, otherwise nullopt
    std::optional<Endpoint> lookup_endpoint(const bb::http::verb verb, const std::string& resource) const;

    /// @brief Given a domain-less URI string e.g. "/some/resource?key1=value1#fragment", extracts
    /// and stores the separate fields
    void parse_request_target(HttpRequest& request) const;

    /// @brief For a string of query parameters, e.g. "key1=value1&key2=value2..", extracts all key-value pairs
    /// and returns as a map
    QueryParameters parse_query_parameters(const std::string& encoded_parameters) const;

    /// @brief Attempts to find and return an endpoint for the request, using the resource and HTTP method.
    std::optional<Endpoint> resolve_route(const bb::http::verb verb, const HttpRequest& request) const;

    const Logger& m_logger;
    std::unordered_map<std::string, Endpoint> m_routes{};
    std::atomic<uint8_t> m_request_count{
        0}; // Rolling identifier for requests, mostly to distinguish log messages from different threads
};

} // namespace server